buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven {
            url "https://repo.spongepowered.org/repository/maven-public/"
            content { includeGroup "org.spongepowered" }
        }
        mavenCentral()

    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'

    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
    //id 'org.parchmentmc.librarian.forgegradle'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

version = 'FirmaCivilization-0.2.2-test5-alpha-1.20.1'
group = 'com.alekiponi.' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = ''

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'examplemod'

            arg "-mixin.config=firmaciv.mixins.json"

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'examplemod'

            arg "-mixin.config=firmaciv.mixins.json"

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {

            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'firmaciv'

            arg "-mixin.config=firmaciv.mixins.json"

            mods {
                firmaciv {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'SCAN'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'firmaciv', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            arg "-mixin.config=firmaciv.mixins.json"

            mods {
                firmaciv {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        // tfc
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        // Patchouli
        name = "BlameJared"
        url = "https://maven.blamejared.com"
    }
}

dependencies {

    minecraft 'net.minecraftforge:forge:1.20.1-47.1.3'
    annotationProcessor("org.spongepowered:mixin:0.8.5:processor")

    // tfc
    fg.deobf("curse.maven:terrafirmacraft-302973:4862659")
    implementation fg.deobf("curse.maven:terrafirmacraft-302973:4862659")

    // patchouli
    fg.deobf("curse.maven:patchouli-306770:4636277")
    implementation fg.deobf("curse.maven:patchouli-306770:4636277")

    fg.deobf("curse.maven:carry-on-274259:4882500")
    runtimeOnly fg.deobf("curse.maven:carry-on-274259:4882500")

    /*
    fg.deobf("curse.maven:better-third-person-435044:4596768")
    runtimeOnly fg.deobf("curse.maven:better-third-person-435044:4596768")

     */

    
    fg.deobf("curse.maven:jei-238222:4712868")
    runtimeOnly fg.deobf("curse.maven:jei-238222:4712868")


    /*
    fg.deobf("curse.maven:alekis-easy-held-models-953157:4977248")
    runtimeOnly fg.deobf("curse.maven:alekis-easy-held-models-953157:4977248")

     */

}


mixin {
    // MixinGradle Settings
    add sourceSets.main, 'firmaciv.refmap.json'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes(["Specification-Title"     : "firmaciv",
                    "Specification-Vendor"    : "alekiponi",
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : "alekiponi",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "TweakClaass"             : "org.spongepowered.asm.launch.MixinTweaker",
                    "TweakOrder"              : 0,
                    "MixinConfigs"            : "firmaciv.mixins.json"])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}